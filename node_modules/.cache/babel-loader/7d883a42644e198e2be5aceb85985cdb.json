{"ast":null,"code":"import _classCallCheck from \"/home/soumajit/ReactProjectFundoo/fundoo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/soumajit/ReactProjectFundoo/fundoo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/soumajit/ReactProjectFundoo/fundoo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/soumajit/ReactProjectFundoo/fundoo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/soumajit/ReactProjectFundoo/fundoo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/soumajit/ReactProjectFundoo/fundoo/src/Components/Dashboard/displayLabelNotes.jsx\";\nimport React, { Component } from 'react';\nimport { NoteController } from '../../Controller/NoteController';\nimport { InputBase, Card, Tooltip, TextField } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport { addLabelonNote } from '../../Controller/label';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport { deleteLabel } from '../../Controller/label';\nimport More from './more';\nimport Collaborator from '../Dashboard/collaborator';\nimport { AppBar, Toolbar, IconButton, ClickAwayListener } from '@material-ui/core';\nimport Chip from '@material-ui/core/Chip';\nimport Remainder from '../Dashboard/remainder';\nimport Archive from '../Dashboard/archive';\nimport { getNotesByLabelName } from '../../Controller/label';\nimport Color from '../Dashboard/color';\nvar themes = createMuiTheme({\n  overrides: {\n    MuiPaper: {\n      rounded: {\n        borderRadius: \"8px\",\n        margin: \"10px\"\n      },\n      elevation24: {\n        boxShadow: \"none\"\n      }\n    },\n    MuiBackdrop: {\n      root: {\n        backgroundColor: \"rgba(15,15,15,0.25)\"\n      }\n    }\n  }\n});\n\nvar DisplayLabelNotes =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DisplayLabelNotes, _Component);\n\n  function DisplayLabelNotes(props) {\n    var _this;\n\n    _classCallCheck(this, DisplayLabelNotes);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DisplayLabelNotes).call(this, props));\n\n    _this.getNotes = function () {// getNotesByLabelName(this.props.labelName).then((res) => {\n      //     this.setState({\n      //         notes: res.data.object\n      //     })\n      // })\n    };\n\n    _this.handleTitleChange = function (event) {\n      _this.setState({\n        title: event.target.value\n      });\n    };\n\n    _this.handleDescription = function (event) {\n      _this.setState({\n        description: event.target.value\n      });\n    };\n\n    _this.handleClickTakeNote = function (note) {\n      console.log(note);\n\n      _this.setState({\n        id: note.id,\n        title: note.title,\n        description: note.description,\n        openDialog: !_this.state.openDialog\n      });\n    };\n\n    _this.deleteLabel = function (label) {\n      console.log('in display component', label);\n      deleteLabel(label.id).then(function (res) {\n        _this.getNotes();\n\n        console.log(res.data);\n      }).catch(function (err) {\n        console.log(err.data);\n      });\n    };\n\n    _this.closeDialog = function () {\n      if (_this.state.title === \"\" && _this.state.description === \"\") return _this.setState({\n        openDialog: !_this.state.openDialog\n      });else {\n        var editedNote = {\n          \"title\": _this.state.title,\n          \"description\": _this.state.description\n        };\n        console.log('noteed', editedNote);\n\n        _this.setState({\n          openDialog: !_this.state.openDialog\n        });\n      }\n    };\n\n    _this.state = {\n      menuItem: false,\n      id: '',\n      title: '',\n      description: '',\n      notes: [],\n      openDialog: false,\n      colabs: []\n    };\n    return _this;\n  }\n\n  _createClass(DisplayLabelNotes, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getNotes();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log(this.state.notes);\n      var viewNote = !this.props.view ? \"note-display\" : \"fullbox-display\";\n      var viewFooter = !this.props.view ? \"note-display-footer\" : \"fullbox-display-footer\";\n      console.log(this.props.labelName);\n      var getAllNotes = this.state.notes.map(function (keys) {\n        return React.createElement(\"div\", {\n          key: keys.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, keys.note.labels.map(function (labela) {\n          return React.createElement(\"div\", {\n            key: labela.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125\n            },\n            __self: this\n          }, labela.labelName === _this2.props.labelName ? labela.labelName : '');\n        }));\n      }); // let getAllNotes = this.state.notes.map((keys) => {\n      //     return <div key={keys.id}>\n      //         <div>\n      //             {keys.note.labels.map((labela) => {\n      //                 return (<div key={labela.id}>{labela.labelName === this.props.labelName ? < div key={keys.id} >\n      //                     < Card key={keys.id} className={viewNote} style={{ backgroundColor: keys.note.colorCode }}>\n      //                         <div onClick={() => { this.handleClickTakeNote(keys.note) }}>\n      //                             <CardContent>\n      //                                 {keys.note.title}\n      //                             </CardContent>\n      //                             <CardContent>\n      //                                 {keys.note.description}\n      //                             </CardContent>\n      //                             <CardContent>\n      //                                 {keys.note.labels.map((labela) => {\n      //                                     return (<div key={labela.id}>{labela === null ? '' :\n      //                                         <Chip label={labela.labelName} onDelete={() => this.deleteLabel(labela)} variant=\"outlined\" />}\n      //                                     </div>);\n      //                                 })}\n      //                                 {keys.user.map((colab) => {\n      //                                     return (<div key={colab.colabId}>{colab === null ? '' :\n      //                                         <Chip label={colab.email} variant=\"outlined\" />}\n      //                                     </div>);\n      //                                 })}\n      //                             </CardContent>\n      //                         </div>\n      //                         <CardActions className={viewFooter}>\n      //                             <Remainder />\n      //                             <Collaborator noteId={keys.note} />\n      //                             <Color noteId={keys.note.id} />\n      //                             <Archive note={keys.note.id} />\n      //                             <More noteId={keys.note.id} />\n      //                         </CardActions>\n      //                     </Card >\n      //                     <Dialog open={this.state.openDialog} >\n      //                         < Card className=\"note-dialog\" style={{ boxShadow: \"1px 1px 1px 1px\" }} >\n      //                             <CardContent>\n      //                                 <TextField\n      //                                     type=\"text\"\n      //                                     multiline\n      //                                     value={this.state.title}\n      //                                     onChange={this.handleTitleChange}\n      //                                 /></CardContent>\n      //                             <CardContent>\n      //                                 <TextField\n      //                                     type=\"text\"\n      //                                     multiline\n      //                                     value={this.state.description}\n      //                                     onChange={this.handleDescription}\n      //                                 /></CardContent>\n      //                             <CardActions className={viewFooter}>\n      //                                 <Remainder />\n      //                                 <Collaborator noteId={keys.note} />\n      //                                 <Archive note={keys.note.id} />\n      //                                 <Color noteId={keys.note.id} />\n      //                                 <More noteId={keys.note.id} />\n      //                                 <Button className=\"button-close\" style={{ float: \"right \" }} onClick={this.closeDialog}>Close</Button>\n      //                             </CardActions>\n      //                         </Card >\n      //                     </Dialog>\n      //                 </div > :\n      //                    keys.note.title }\n      //                 </div>);\n      //             })}\n      //         </div>\n      //     </div>\n      // });\n\n      return React.createElement(\"div\", {\n        className: \"allNotePage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(MuiThemeProvider, {\n        theme: themes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, getAllNotes));\n    }\n  }]);\n\n  return DisplayLabelNotes;\n}(Component);\n\nexport default withRouter(DisplayLabelNotes);","map":{"version":3,"sources":["/home/soumajit/ReactProjectFundoo/fundoo/src/Components/Dashboard/displayLabelNotes.jsx"],"names":["React","Component","NoteController","InputBase","Card","Tooltip","TextField","withRouter","MuiThemeProvider","createMuiTheme","Dialog","addLabelonNote","CardContent","CardActions","Button","deleteLabel","More","Collaborator","AppBar","Toolbar","IconButton","ClickAwayListener","Chip","Remainder","Archive","getNotesByLabelName","Color","themes","overrides","MuiPaper","rounded","borderRadius","margin","elevation24","boxShadow","MuiBackdrop","root","backgroundColor","DisplayLabelNotes","props","getNotes","handleTitleChange","event","setState","title","target","value","handleDescription","description","handleClickTakeNote","note","console","log","id","openDialog","state","label","then","res","data","catch","err","closeDialog","editedNote","menuItem","notes","colabs","viewNote","view","viewFooter","labelName","getAllNotes","map","keys","labels","labela"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { NoteController } from '../../Controller/NoteController';\nimport { InputBase, Card, Tooltip, TextField } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport { addLabelonNote } from '../../Controller/label';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport { deleteLabel } from '../../Controller/label';\nimport More from './more';\nimport Collaborator from '../Dashboard/collaborator';\nimport { AppBar, Toolbar, IconButton, ClickAwayListener } from '@material-ui/core';\nimport Chip from '@material-ui/core/Chip';\nimport Remainder from '../Dashboard/remainder';\nimport Archive from '../Dashboard/archive';\nimport { getNotesByLabelName } from '../../Controller/label';\nimport Color from '../Dashboard/color';\nconst themes = createMuiTheme({\n    overrides: {\n        MuiPaper: {\n            rounded: {\n                borderRadius: \"8px\",\n                margin: \"10px\"\n            },\n            elevation24: {\n                boxShadow: \"none\"\n            }\n        },\n        MuiBackdrop: {\n            root: {\n                backgroundColor: \"rgba(15,15,15,0.25)\"\n            }\n        }\n    }\n})\nclass DisplayLabelNotes extends Component {\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            menuItem: false,\n            id: '',\n            title: '',\n            description: '',\n            notes: [],\n            openDialog: false,\n            colabs: [],\n        }\n\n\n    }\n\n    componentDidMount() {\n\n        this.getNotes()\n    }\n    getNotes = () => {\n        // getNotesByLabelName(this.props.labelName).then((res) => {\n        //     this.setState({\n        //         notes: res.data.object\n        //     })\n        // })\n    }\n    handleTitleChange = (event) => {\n        this.setState({\n            title: event.target.value\n        })\n    }\n    handleDescription = (event) => {\n        this.setState({\n            description: event.target.value\n        })\n    }\n\n    handleClickTakeNote = (note) => {\n        console.log(note)\n        this.setState({\n            id: note.id,\n            title: note.title,\n            description: note.description,\n            openDialog: !this.state.openDialog,\n        })\n    }\n    deleteLabel = (label) => {\n        console.log('in display component', label)\n        deleteLabel(label.id).then((res) => {\n            this.getNotes()\n            console.log(res.data)\n\n        }).catch((err) => {\n            console.log(err.data)\n        })\n    }\n    closeDialog = () => {\n        if (this.state.title === \"\" && this.state.description === \"\")\n            return this.setState({ openDialog: !this.state.openDialog })\n        else {\n            var editedNote = {\n                \"title\": this.state.title,\n                \"description\": this.state.description,\n\n            }\n            console.log('noteed', editedNote)\n\n            this.setState({\n\n                openDialog: !this.state.openDialog,\n            })\n        }\n    }\n\n\n\n    render() {\n        console.log(this.state.notes)\n        const viewNote = !this.props.view ? \"note-display\" : \"fullbox-display\"\n        const viewFooter = !this.props.view ? \"note-display-footer\" : \"fullbox-display-footer\"\n        console.log(this.props.labelName)\n        let getAllNotes = this.state.notes.map((keys) => {\n            return <div key={keys.id}>\n                {keys.note.labels.map((labela) => {\n                    return (<div key={labela.id}>\n                        {labela.labelName === this.props.labelName ? labela.labelName : ''}\n                    </div>\n                    );\n                })}\n            </div>\n        })\n        // let getAllNotes = this.state.notes.map((keys) => {\n        //     return <div key={keys.id}>\n        //         <div>\n        //             {keys.note.labels.map((labela) => {\n        //                 return (<div key={labela.id}>{labela.labelName === this.props.labelName ? < div key={keys.id} >\n        //                     < Card key={keys.id} className={viewNote} style={{ backgroundColor: keys.note.colorCode }}>\n        //                         <div onClick={() => { this.handleClickTakeNote(keys.note) }}>\n        //                             <CardContent>\n        //                                 {keys.note.title}\n        //                             </CardContent>\n        //                             <CardContent>\n        //                                 {keys.note.description}\n        //                             </CardContent>\n        //                             <CardContent>\n        //                                 {keys.note.labels.map((labela) => {\n        //                                     return (<div key={labela.id}>{labela === null ? '' :\n        //                                         <Chip label={labela.labelName} onDelete={() => this.deleteLabel(labela)} variant=\"outlined\" />}\n        //                                     </div>);\n\n        //                                 })}\n        //                                 {keys.user.map((colab) => {\n\n        //                                     return (<div key={colab.colabId}>{colab === null ? '' :\n        //                                         <Chip label={colab.email} variant=\"outlined\" />}\n        //                                     </div>);\n\n        //                                 })}\n\n        //                             </CardContent>\n        //                         </div>\n        //                         <CardActions className={viewFooter}>\n        //                             <Remainder />\n        //                             <Collaborator noteId={keys.note} />\n        //                             <Color noteId={keys.note.id} />\n        //                             <Archive note={keys.note.id} />\n        //                             <More noteId={keys.note.id} />\n        //                         </CardActions>\n        //                     </Card >\n        //                     <Dialog open={this.state.openDialog} >\n        //                         < Card className=\"note-dialog\" style={{ boxShadow: \"1px 1px 1px 1px\" }} >\n        //                             <CardContent>\n        //                                 <TextField\n        //                                     type=\"text\"\n        //                                     multiline\n\n\n        //                                     value={this.state.title}\n        //                                     onChange={this.handleTitleChange}\n        //                                 /></CardContent>\n        //                             <CardContent>\n        //                                 <TextField\n        //                                     type=\"text\"\n        //                                     multiline\n        //                                     value={this.state.description}\n        //                                     onChange={this.handleDescription}\n        //                                 /></CardContent>\n        //                             <CardActions className={viewFooter}>\n        //                                 <Remainder />\n        //                                 <Collaborator noteId={keys.note} />\n\n\n\n        //                                 <Archive note={keys.note.id} />\n        //                                 <Color noteId={keys.note.id} />\n        //                                 <More noteId={keys.note.id} />\n        //                                 <Button className=\"button-close\" style={{ float: \"right \" }} onClick={this.closeDialog}>Close</Button>\n\n        //                             </CardActions>\n        //                         </Card >\n        //                     </Dialog>\n        //                 </div > :\n        //                    keys.note.title }\n        //                 </div>);\n\n        //             })}\n        //         </div>\n\n        //     </div>\n        // });\n\n        return (\n            <div className=\"allNotePage\">\n                <MuiThemeProvider theme={themes}>\n                    {getAllNotes}\n                </MuiThemeProvider>\n            </div >\n        )\n    }\n}\n\nexport default withRouter(DisplayLabelNotes)"]},"metadata":{},"sourceType":"module"}