{"ast":null,"code":"import _classCallCheck from \"/home/soumajit/ReactProjectFundoo/fundoo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/soumajit/ReactProjectFundoo/fundoo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/soumajit/ReactProjectFundoo/fundoo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/soumajit/ReactProjectFundoo/fundoo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/soumajit/ReactProjectFundoo/fundoo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/soumajit/ReactProjectFundoo/fundoo/src/Components/Dashboard/displayLabelNotes.jsx\";\nimport React, { Component } from 'react';\nimport { NoteController } from '../../Controller/NoteController';\nimport { InputBase, Card, Tooltip, TextField } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport { addLabelonNote } from '../../Controller/label';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport { deleteLabel } from '../../Controller/label';\nimport More from './more';\nimport Collaborator from '../Dashboard/collaborator';\nimport { AppBar, Toolbar, IconButton, ClickAwayListener } from '@material-ui/core';\nimport Chip from '@material-ui/core/Chip';\nimport Remainder from '../Dashboard/remainder';\nimport Archive from '../Dashboard/archive';\nimport { getNotesByLabelName } from '../../Controller/label';\nimport Color from '../Dashboard/color';\nvar themes = createMuiTheme({\n  overrides: {\n    MuiPaper: {\n      rounded: {\n        borderRadius: \"8px\",\n        margin: \"10px\"\n      },\n      elevation24: {\n        boxShadow: \"none\"\n      }\n    },\n    MuiBackdrop: {\n      root: {\n        backgroundColor: \"rgba(15,15,15,0.25)\"\n      }\n    }\n  }\n});\n\nvar DisplayLabelNotes =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DisplayLabelNotes, _Component);\n\n  function DisplayLabelNotes(props) {\n    var _this;\n\n    _classCallCheck(this, DisplayLabelNotes);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DisplayLabelNotes).call(this, props));\n\n    _this.getNotes = function () {\n      // getNotesByLabelName(this.props.labelName).then((res) => {\n      //     this.setState({\n      //         notes: res.data.object\n      //     })\n      // })\n      NoteController().then(function (res) {\n        console.log(\"in getNotes \", res.data);\n\n        _this.setState({\n          notes: res.data.object\n        });\n\n        console.log('data', _this.state.notes);\n        console.log('colab', _this.state.colabs);\n      });\n    };\n\n    _this.handleTitleChange = function (event) {\n      _this.setState({\n        title: event.target.value\n      });\n    };\n\n    _this.handleDescription = function (event) {\n      _this.setState({\n        description: event.target.value\n      });\n    };\n\n    _this.handleClickTakeNote = function (note) {\n      console.log(note);\n\n      _this.setState({\n        id: note.id,\n        title: note.title,\n        description: note.description,\n        openDialog: !_this.state.openDialog\n      });\n    };\n\n    _this.deleteLabel = function (label) {\n      console.log('in display component', label);\n      deleteLabel(label.id).then(function (res) {\n        _this.getNotes();\n\n        console.log(res.data);\n      }).catch(function (err) {\n        console.log(err.data);\n      });\n    };\n\n    _this.closeDialog = function () {\n      if (_this.state.title === \"\" && _this.state.description === \"\") return _this.setState({\n        openDialog: !_this.state.openDialog\n      });else {\n        var editedNote = {\n          \"title\": _this.state.title,\n          \"description\": _this.state.description\n        };\n        console.log('noteed', editedNote);\n\n        _this.setState({\n          openDialog: !_this.state.openDialog\n        });\n      }\n    };\n\n    _this.state = {\n      menuItem: false,\n      id: '',\n      title: '',\n      description: '',\n      notes: [],\n      openDialog: false,\n      colabs: []\n    };\n    return _this;\n  }\n\n  _createClass(DisplayLabelNotes, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getNotes();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.state.notes);\n      var viewNote = !this.props.view ? \"note-display\" : \"fullbox-display\";\n      var viewFooter = !this.props.view ? \"note-display-footer\" : \"fullbox-display-footer\"; // console.log(this.props.labelName)\n      // let getAllNotes = this.state.notes.map((keys) => {\n      //     return <div key={keys.id}>\n      //         {keys.note.labels.map((labela) => {\n      //             return (<div key={labela.id}>\n      //                 {labela.labelName === this.props.labelName ? labela.labelName : ''}\n      //             </div>\n      //             );\n      //         })}\n      //     </div>\n      // })\n      // let getAllNotes = this.state.notes.map((keys) => {\n      //     return <div key={keys.id}>\n      //         <div>\n      //             {keys.note.labels.map((labela) => {\n      //                 return (<div key={labela.id}>{labela.labelName === this.props.labelName ? < div key={keys.id} >\n      //                     < Card key={keys.id} className={viewNote} style={{ backgroundColor: keys.note.colorCode }}>\n      //                         <div onClick={() => { this.handleClickTakeNote(keys.note) }}>\n      //                             <CardContent>\n      //                                 {keys.note.title}\n      //                             </CardContent>\n      //                             <CardContent>\n      //                                 {keys.note.description}\n      //                             </CardContent>\n      //                             <CardContent>\n      //                                 {keys.note.labels.map((labela) => {\n      //                                     return (<div key={labela.id}>{labela === null ? '' :\n      //                                         <Chip label={labela.labelName} onDelete={() => this.deleteLabel(labela)} variant=\"outlined\" />}\n      //                                     </div>);\n      //                                 })}\n      //                                 {keys.user.map((colab) => {\n      //                                     return (<div key={colab.colabId}>{colab === null ? '' :\n      //                                         <Chip label={colab.email} variant=\"outlined\" />}\n      //                                     </div>);\n      //                                 })}\n      //                             </CardContent>\n      //                         </div>\n      //                         <CardActions className={viewFooter}>\n      //                             <Remainder />\n      //                             <Collaborator noteId={keys.note} />\n      //                             <Color noteId={keys.note.id} />\n      //                             <Archive note={keys.note.id} />\n      //                             <More noteId={keys.note.id} />\n      //                         </CardActions>\n      //                     </Card >\n      //                     <Dialog open={this.state.openDialog} >\n      //                         < Card className=\"note-dialog\" style={{ boxShadow: \"1px 1px 1px 1px\" }} >\n      //                             <CardContent>\n      //                                 <TextField\n      //                                     type=\"text\"\n      //                                     multiline\n      //                                     value={this.state.title}\n      //                                     onChange={this.handleTitleChange}\n      //                                 /></CardContent>\n      //                             <CardContent>\n      //                                 <TextField\n      //                                     type=\"text\"\n      //                                     multiline\n      //                                     value={this.state.description}\n      //                                     onChange={this.handleDescription}\n      //                                 /></CardContent>\n      //                             <CardActions className={viewFooter}>\n      //                                 <Remainder />\n      //                                 <Collaborator noteId={keys.note} />\n      //                                 <Archive note={keys.note.id} />\n      //                                 <Color noteId={keys.note.id} />\n      //                                 <More noteId={keys.note.id} />\n      //                                 <Button className=\"button-close\" style={{ float: \"right \" }} onClick={this.closeDialog}>Close</Button>\n      //                             </CardActions>\n      //                         </Card >\n      //                     </Dialog>\n      //                 </div > :\n      //                    keys.note.title }\n      //                 </div>);\n      //             })}\n      //         </div>\n      //     </div>\n      // });\n\n      return React.createElement(\"div\", {\n        className: \"allNotePage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(MuiThemeProvider, {\n        theme: themes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, getAllNotes));\n    }\n  }]);\n\n  return DisplayLabelNotes;\n}(Component);\n\nexport default withRouter(DisplayLabelNotes);","map":{"version":3,"sources":["/home/soumajit/ReactProjectFundoo/fundoo/src/Components/Dashboard/displayLabelNotes.jsx"],"names":["React","Component","NoteController","InputBase","Card","Tooltip","TextField","withRouter","MuiThemeProvider","createMuiTheme","Dialog","addLabelonNote","CardContent","CardActions","Button","deleteLabel","More","Collaborator","AppBar","Toolbar","IconButton","ClickAwayListener","Chip","Remainder","Archive","getNotesByLabelName","Color","themes","overrides","MuiPaper","rounded","borderRadius","margin","elevation24","boxShadow","MuiBackdrop","root","backgroundColor","DisplayLabelNotes","props","getNotes","then","res","console","log","data","setState","notes","object","state","colabs","handleTitleChange","event","title","target","value","handleDescription","description","handleClickTakeNote","note","id","openDialog","label","catch","err","closeDialog","editedNote","menuItem","viewNote","view","viewFooter","getAllNotes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { NoteController } from '../../Controller/NoteController';\nimport { InputBase, Card, Tooltip, TextField } from '@material-ui/core';\nimport { withRouter } from 'react-router-dom';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport { addLabelonNote } from '../../Controller/label';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport { deleteLabel } from '../../Controller/label';\nimport More from './more';\nimport Collaborator from '../Dashboard/collaborator';\nimport { AppBar, Toolbar, IconButton, ClickAwayListener } from '@material-ui/core';\nimport Chip from '@material-ui/core/Chip';\nimport Remainder from '../Dashboard/remainder';\nimport Archive from '../Dashboard/archive';\nimport { getNotesByLabelName } from '../../Controller/label';\nimport Color from '../Dashboard/color';\nconst themes = createMuiTheme({\n    overrides: {\n        MuiPaper: {\n            rounded: {\n                borderRadius: \"8px\",\n                margin: \"10px\"\n            },\n            elevation24: {\n                boxShadow: \"none\"\n            }\n        },\n        MuiBackdrop: {\n            root: {\n                backgroundColor: \"rgba(15,15,15,0.25)\"\n            }\n        }\n    }\n})\nclass DisplayLabelNotes extends Component {\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            menuItem: false,\n            id: '',\n            title: '',\n            description: '',\n            notes: [],\n            openDialog: false,\n            colabs: [],\n        }\n\n\n    }\n\n    componentDidMount() {\n\n        this.getNotes()\n    }\n    getNotes = () => {\n        // getNotesByLabelName(this.props.labelName).then((res) => {\n        //     this.setState({\n        //         notes: res.data.object\n        //     })\n        // })\n        NoteController().then((res) => {\n            console.log(\"in getNotes \", res.data);\n            this.setState({\n                notes: res.data.object,\n            })\n            console.log('data', this.state.notes)\n            console.log('colab', this.state.colabs)\n        }\n        )\n    }\n    handleTitleChange = (event) => {\n        this.setState({\n            title: event.target.value\n        })\n    }\n    handleDescription = (event) => {\n        this.setState({\n            description: event.target.value\n        })\n    }\n\n    handleClickTakeNote = (note) => {\n        console.log(note)\n        this.setState({\n            id: note.id,\n            title: note.title,\n            description: note.description,\n            openDialog: !this.state.openDialog,\n        })\n    }\n    deleteLabel = (label) => {\n        console.log('in display component', label)\n        deleteLabel(label.id).then((res) => {\n            this.getNotes()\n            console.log(res.data)\n\n        }).catch((err) => {\n            console.log(err.data)\n        })\n    }\n    closeDialog = () => {\n        if (this.state.title === \"\" && this.state.description === \"\")\n            return this.setState({ openDialog: !this.state.openDialog })\n        else {\n            var editedNote = {\n                \"title\": this.state.title,\n                \"description\": this.state.description,\n\n            }\n            console.log('noteed', editedNote)\n\n            this.setState({\n\n                openDialog: !this.state.openDialog,\n            })\n        }\n    }\n\n\n\n    render() {\n        console.log(this.state.notes)\n        const viewNote = !this.props.view ? \"note-display\" : \"fullbox-display\"\n        const viewFooter = !this.props.view ? \"note-display-footer\" : \"fullbox-display-footer\"\n        // console.log(this.props.labelName)\n        // let getAllNotes = this.state.notes.map((keys) => {\n        //     return <div key={keys.id}>\n        //         {keys.note.labels.map((labela) => {\n        //             return (<div key={labela.id}>\n        //                 {labela.labelName === this.props.labelName ? labela.labelName : ''}\n        //             </div>\n        //             );\n        //         })}\n        //     </div>\n        // })\n        // let getAllNotes = this.state.notes.map((keys) => {\n        //     return <div key={keys.id}>\n        //         <div>\n        //             {keys.note.labels.map((labela) => {\n        //                 return (<div key={labela.id}>{labela.labelName === this.props.labelName ? < div key={keys.id} >\n        //                     < Card key={keys.id} className={viewNote} style={{ backgroundColor: keys.note.colorCode }}>\n        //                         <div onClick={() => { this.handleClickTakeNote(keys.note) }}>\n        //                             <CardContent>\n        //                                 {keys.note.title}\n        //                             </CardContent>\n        //                             <CardContent>\n        //                                 {keys.note.description}\n        //                             </CardContent>\n        //                             <CardContent>\n        //                                 {keys.note.labels.map((labela) => {\n        //                                     return (<div key={labela.id}>{labela === null ? '' :\n        //                                         <Chip label={labela.labelName} onDelete={() => this.deleteLabel(labela)} variant=\"outlined\" />}\n        //                                     </div>);\n\n        //                                 })}\n        //                                 {keys.user.map((colab) => {\n\n        //                                     return (<div key={colab.colabId}>{colab === null ? '' :\n        //                                         <Chip label={colab.email} variant=\"outlined\" />}\n        //                                     </div>);\n\n        //                                 })}\n\n        //                             </CardContent>\n        //                         </div>\n        //                         <CardActions className={viewFooter}>\n        //                             <Remainder />\n        //                             <Collaborator noteId={keys.note} />\n        //                             <Color noteId={keys.note.id} />\n        //                             <Archive note={keys.note.id} />\n        //                             <More noteId={keys.note.id} />\n        //                         </CardActions>\n        //                     </Card >\n        //                     <Dialog open={this.state.openDialog} >\n        //                         < Card className=\"note-dialog\" style={{ boxShadow: \"1px 1px 1px 1px\" }} >\n        //                             <CardContent>\n        //                                 <TextField\n        //                                     type=\"text\"\n        //                                     multiline\n\n\n        //                                     value={this.state.title}\n        //                                     onChange={this.handleTitleChange}\n        //                                 /></CardContent>\n        //                             <CardContent>\n        //                                 <TextField\n        //                                     type=\"text\"\n        //                                     multiline\n        //                                     value={this.state.description}\n        //                                     onChange={this.handleDescription}\n        //                                 /></CardContent>\n        //                             <CardActions className={viewFooter}>\n        //                                 <Remainder />\n        //                                 <Collaborator noteId={keys.note} />\n\n\n\n        //                                 <Archive note={keys.note.id} />\n        //                                 <Color noteId={keys.note.id} />\n        //                                 <More noteId={keys.note.id} />\n        //                                 <Button className=\"button-close\" style={{ float: \"right \" }} onClick={this.closeDialog}>Close</Button>\n\n        //                             </CardActions>\n        //                         </Card >\n        //                     </Dialog>\n        //                 </div > :\n        //                    keys.note.title }\n        //                 </div>);\n\n        //             })}\n        //         </div>\n\n        //     </div>\n        // });\n\n        return (\n            <div className=\"allNotePage\">\n                <MuiThemeProvider theme={themes}>\n                    {getAllNotes}\n                </MuiThemeProvider>\n            </div >\n        )\n    }\n}\n\nexport default withRouter(DisplayLabelNotes)"]},"metadata":{},"sourceType":"module"}